using LccApiNet.Categories.Abstraction;
using LccApiNet.Exceptions;
using System.Threading;
using System.Threading.Tasks;
using LccApiNet.Security;
using LccApiNet.Services;
using LccApiNet.Model;

namespace LccApiNet
{
    /// <summary>
    /// Abstraction of the main API class
    /// </summary>
    public interface ILccApi
    {
#if DEBUG
        internal const string API_HOST = "www.larc.ml/dev";
#else
        internal const string API_HOST = "www.larc.ml/api";
#endif

        /// <summary>
        /// Payload of the <see cref="AccessToken"/>
        /// </summary>
        JwtPayload? AccessTokenContent { get; }

        /// <summary>
        /// JWT that is used to get access to the user methods
        /// </summary>
        string? AccessToken { get; }

        #region <auto-generated> Generated code of the categories.

        /// <summary>
        /// Contains methods that are used to control the league game client.
        /// </summary>
        public IClientCategory Client { get; }

        /// <summary>
        /// Contains methods that are used to retrieve or update information about user's devices.
        /// </summary>
        public IDeviceCategory Device { get; }

        /// <summary>
        /// Contains methods that are used to get user information or related to the authentication.
        /// </summary>
        public IIdentityCategory Identity { get; }

        #endregion

        /// <summary>
        /// Service that manages user events.
        /// </summary>
        EventService Events { get; }

        /// <summary>
        /// Service that manages command execution flow.
        /// </summary>
        CommandService Commands { get; }

        /// <summary>
        /// Initializes the API module. 
        /// Tries to get stored access token and refreshes it
        /// </summary>
        Task InitAsync(IUserCredentialsStorage userCredentialsStorage, CancellationToken token = default);
        
        /// <summary>
        /// Authorizes current device under specific user.
        /// May store credentials in <see cref="IUserCredentialsStorage"/> provided for initialization
        /// if <paramref name="saveCredentials"/> is true.
        /// </summary>
        /// <param name="login">Nickname or email of the user under whom device is authorized</param>
        /// <param name="password">Password of the user under whom device is authorized</param>
        /// <param name="deviceName">Name of the current device</param>
        /// <param name="deviceType">Type of the current device</param>
        /// <param name="saveCredentials">Whether access token should be saved in <see cref="IUserCredentialsStorage"/></param>
        /// <param name="token">Token to stop the operation</param>
        /// <returns>True if authorization was successful, False otherwise</returns>
        /// <exception cref="MethodException">When something went wrong</exception>
        Task<bool> AuthorizeDevice(string login, string password, string deviceName, DeviceType deviceType,
            bool saveCredentials = false, CancellationToken token = default);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="methodPath">Path to the method</param>
        /// <param name="withAccessToken">Whether access token should be provided to execute method</param>
        /// <returns></returns>
        /// <exception cref="MissingResponseException">When response is missing</exception>
        /// <exception cref="WrongResponseException">When response has incorrect structure</exception>
        /// <exception cref="MethodException">When something went wrong</exception>
        /// <exception cref="ServerUnreachableException">When server host is unreachable</exception>
        /// <exception cref="ApiServerException">When got unexpected HTTP code or headers</exception>
        /// <exception cref="LccUserNotAuthorizedException">
        /// When trying to execute method that needs authorization without authorizing firstly
        /// </exception>
        Task ExecuteAsync(string methodPath, bool withAccessToken = true, CancellationToken token = default);

        /// <summary>
        /// Executes API method with parameters and a response
        /// </summary>
        /// <typeparam name="TResponse">Type of the response model</typeparam>
        /// <typeparam name="TParameters">Type of the parameters model</typeparam>
        /// <param name="methodPath">Path to the method</param>
        /// <param name="params">Method parameters</param>
        /// <param name="withAccessToken">Whether access token should be provided to execute method</param>
        /// <returns>Method response</returns>
        /// <exception cref="MissingResponseException"></exception>
        /// <exception cref="WrongResponseException"></exception>
        /// <exception cref="MethodException"></exception>
        /// <exception cref="ServerUnreachableException"></exception>
        /// <exception cref="ApiServerException"></exception>
        /// <exception cref="LccUserNotAuthorizedException"></exception>
        Task<TResponse> ExecuteAsync<TResponse, TParameters>(string methodPath, TParameters @params, bool withAccessToken = true, CancellationToken token = default)
            where TResponse : ApiResponse;

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="TResponse"></typeparam>
        /// <typeparam name="TParameters"></typeparam>
        /// <param name="methodPath">Path to the method</param>
        /// <param name="params">Method parameters</param>
        /// <param name="responseObjectKey"></param>
        /// <param name="withAccessToken">Whether access token should be provided to execute method</param>
        /// <returns>Method response</returns>
        /// <exception cref="MissingResponseException"></exception>
        /// <exception cref="WrongResponseException"></exception>
        /// <exception cref="MethodException"></exception>
        /// <exception cref="ServerUnreachableException"></exception>
        /// <exception cref="ApiServerException"></exception>
        /// <exception cref="LccUserNotAuthorizedException"></exception>
        Task<TResponse> ExecuteAsync<TResponse, TParameters>(string methodPath, TParameters @params, string responseObjectKey, bool withAccessToken = true, CancellationToken token = default);

        /// <summary>
        /// Executes API method with a response without parameters
        /// </summary>
        /// <typeparam name="TResponse">Type of the response model</typeparam>
        /// <param name="methodPath">Path to the method</param>
        /// <param name="withAccessToken">Whether access token should be provided to execute method</param>
        /// <returns>Method response</returns>
        /// <exception cref="MissingResponseException"></exception>
        /// <exception cref="WrongResponseException"></exception>
        /// <exception cref="MethodException"></exception>
        /// <exception cref="ServerUnreachableException"></exception>
        /// <exception cref="ApiServerException"></exception>
        /// <exception cref="LccUserNotAuthorizedException"></exception>
        Task<TResponse> ExecuteAsync<TResponse>(string methodPath, bool withAccessToken = true, CancellationToken token = default)
            where TResponse : ApiResponse;

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="TResponse"></typeparam>
        /// <param name="methodPath">Path to the method</param>
        /// <param name="responseObjectKey"></param>
        /// <param name="withAccessToken">Whether access token should be provided to execute method</param>
        /// <returns>Method response</returns>
        /// <exception cref="MissingResponseException"></exception>
        /// <exception cref="WrongResponseException"></exception>
        /// <exception cref="MethodException"></exception>
        /// <exception cref="ServerUnreachableException"></exception>
        /// <exception cref="ApiServerException"></exception>
        /// <exception cref="LccUserNotAuthorizedException"></exception>
        Task<TResponse> ExecuteAsync<TResponse>(string methodPath, string responseObjectKey, bool withAccessToken = true, CancellationToken token = default);
        
        /// <summary>
        /// Executes API method with parameters and without response
        /// </summary>
        /// <typeparam name="TParameters">Type of the parameters model</typeparam>
        /// <param name="methodPath">Path to the method</param>
        /// <param name="params">Method parameters</param>
        /// <param name="withAccessToken">Whether access token should be provided to execute method</param>
        /// <exception cref="MissingResponseException"></exception>
        /// <exception cref="WrongResponseException"></exception>
        /// <exception cref="MethodException"></exception>
        /// <exception cref="ServerUnreachableException"></exception>
        /// <exception cref="ApiServerException"></exception>
        /// <exception cref="LccUserNotAuthorizedException"></exception>
        Task ExecuteAsync<TParameters>(string methodPath, TParameters @params, bool withAccessToken = true, CancellationToken token = default);
    }
}
