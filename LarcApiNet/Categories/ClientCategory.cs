#nullable enable
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using LarcApiNet;
using LarcApiNet.Categories.Abstraction;
using LarcApiNet.Exceptions;
using LarcApiNet.Model;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;


namespace LarcApiNet.Categories {
    
    
    /// <inheritdoc />
    public class ClientCategory : IClientCategory {
        
        private ILarcApi _api;
        
        public ClientCategory(ILarcApi api) {
            _api = api;
        }
        
        /// <inheritdoc />
        public async Task ReportClientOpenedAsync(CancellationToken token = default) 
        {
        	await _api.ExecuteAsync ("/client/reportClientOpened", true, token);
        }
        
        /// <inheritdoc />
        public async Task ReportClientClosedAsync(CancellationToken token = default) 
        {
        	await _api.ExecuteAsync ("/client/reportClientClosed", true, token);
        }
        
        /// <inheritdoc />
        public async Task SetGameflowPhaseAsync(GameflowPhase gameflowPhase, DateTime? readyCheckStarted, CancellationToken token = default) 
        {
        	if (gameflowPhase == GameflowPhase.ReadyCheck && readyCheckStarted == null) {
        		throw new ArgumentException ("When game flow phase is ready check, ready check started is required.", nameof (readyCheckStarted));
        	}
        	await _api.ExecuteAsync ("/client/setGameflowPhase", new SetGameflowPhaseParameters (gameflowPhase, readyCheckStarted), true, token).ConfigureAwait (false);
        }
        
        /// <inheritdoc />
        /// TODO: Needs revision due to a signature changes.
        public async Task ReportChampSelectStartedAsync(int userPosition, bool bansPlanned, int enemiesCount, List<Role> alliesRoles, CancellationToken token = default) 
        {
        	// <auto-generated-safe-area> Code within tag borders shouldn't cause incorrect behavior and will be preserved.
        	// TODO: Add parameters validation
        	// </auto-generated-safe-area>
        	ChampSelectParameters parameters = new ChampSelectParameters (userPosition, bansPlanned, enemiesCount, alliesRoles);
        	await _api.ExecuteAsync<ChampSelectParameters> ("/client/reportChampSelectStarted", parameters, true, token);
        }
        
        /// <inheritdoc />
        public async Task ReportActionRequestedAsync(DateTime requestedAt, bool isAllyAction, ValueRange actorsRange, ActionType type, CancellationToken token = default) 
        {
        	// <auto-generated-safe-area> Code within tag borders shouldn't cause incorrect behavior and will be preserved.
        	// TODO: Add parameters validation
        	// </auto-generated-safe-area>
        	ActionRequestedParameters parameters = new ActionRequestedParameters (requestedAt, isAllyAction, actorsRange, type);
        	await _api.ExecuteAsync<ActionRequestedParameters>("/client/reportActionRequested", parameters, true, token);
        }
        
        /// <inheritdoc />
        public async Task ReportActionChangedAsync(bool completed, int championId, int actorPosition, CancellationToken token = default) 
        {
        	// <auto-generated-safe-area> Code within tag borders shouldn't cause incorrect behavior and will be preserved.
        	// TODO: Add parameters validation
        	// </auto-generated-safe-area>
        	ActionChangedParameters parameters = new ActionChangedParameters (completed, championId, actorPosition);
        	await _api.ExecuteAsync<ActionChangedParameters>("/client/reportActionChanged", parameters, true, token);
        }
        
        /// <inheritdoc />
        public async Task ReportSkinChangedAsync(int playerPosition, int skinId, CancellationToken token = default) 
        {
        	// <auto-generated-safe-area> Code within tag borders shouldn't cause incorrect behavior and will be preserved.
        	// TODO: Add parameters validation
        	// </auto-generated-safe-area>
        	SkinChangedParameters parameters = new SkinChangedParameters (playerPosition, skinId);
        	await _api.ExecuteAsync<SkinChangedParameters> ("/client/reportSkinChanged", parameters, true, token);
        }
        
        /// <inheritdoc />
        public async Task ReportChampSelectEndedAsync(CancellationToken token = default) 
        {
        	await _api.ExecuteAsync ("/client/reportChampSelectEnded", true, token);
        }
        
        /// <inheritdoc />
        public async Task<int> SendCommandAsync(int controllerId, CommandName commandName, ChampionCommandArgs? commandArgs, CancellationToken token = default) 
        {
        	return await _api.ExecuteAsync<int, SendCommandParameters> ("/client/sendCommand", new SendCommandParameters (controllerId, commandName, null), "commandId", true, token).ConfigureAwait (false);
        }
        
        /// <inheritdoc />
        public async Task SetCommandResultAsync(int commandId, CommandResult result, CancellationToken token = default) 
        {
        	// <auto-generated-safe-area> Code within tag borders shouldn't cause incorrect behavior and will be preserved.
        	// TODO: Add parameters validation
        	// </auto-generated-safe-area>
        	SetCommandResultParameters parameters = new SetCommandResultParameters (commandId, result);
        	await _api.ExecuteAsync<SetCommandResultParameters> ("/client/setCommandResult", parameters, true, token);
        }
    }
}

#nullable restore
