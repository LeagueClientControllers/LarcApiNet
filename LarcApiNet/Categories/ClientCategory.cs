#nullable enable
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using LarcApiNet;
using LarcApiNet.Categories.Abstraction;
using LarcApiNet.Exceptions;
using LarcApiNet.Model;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;


namespace LarcApiNet.Categories {
    
    
    /// <inheritdoc />
    public class ClientCategory : IClientCategory {
        
        private ILccApi _api;
        
        public ClientCategory(ILccApi api) {
            _api = api;
        }
        
        /// <inheritdoc />
        public async Task SetGameflowPhaseAsync(GameflowPhase? gameflowPhase, int? readyCheckStarted, CancellationToken token = default) 
        {
        	if (gameflowPhase == GameflowPhase.ReadyCheck && readyCheckStarted == null) {
        		throw new ArgumentException ("When game flow phase is ready check, ready check started is required.", nameof (readyCheckStarted));
        	}
        	await _api.ExecuteAsync ("/client/setGameflowPhase", new SetGameflowPhaseParameters (gameflowPhase, 0), true, token).ConfigureAwait (false);
        }
        
        /// <inheritdoc />
        public async Task<int> SendCommandAsync(int controllerId, CommandName commandName, SomeParametrizedCommandArgs? commandArgs, CancellationToken token = default) 
        {
        	return await _api.ExecuteAsync<int, SendCommandParameters> ("/client/sendCommand", new SendCommandParameters (controllerId, commandName, null), "commandId", true, token).ConfigureAwait (false);
        }
        
        /// <inheritdoc />
        public async Task SetCommandResultAsync(int commandId, CommandResult result, CancellationToken token = default) 
        {
        	await _api.ExecuteAsync ("/client/setCommandResult", new SetCommandResultParameters (commandId, result), true, token).ConfigureAwait (false);
        }
    }
}

#nullable restore
