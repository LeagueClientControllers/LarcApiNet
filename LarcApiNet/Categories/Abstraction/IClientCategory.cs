#nullable enable
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using LarcApiNet.Exceptions;
using LarcApiNet.Model;
using NetLibraryGenerator.Attributes;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;


namespace LarcApiNet.Categories.Abstraction {
    
    
    /// <summary>
    /// Contains methods that are used to control the league game client.
    /// </summary>
    public interface IClientCategory {
        
        /// <summary>
        /// Reports that the «League of Legends» client
        /// on controller's machine has been opened.
        /// </summary>
        [ControllerOnly()]
        Task ReportClientOpenedAsync(CancellationToken token = default);
        
        /// <summary>
        /// Reports that the «League of Legends» client
        /// on controller's machine has been closed.
        /// </summary>
        [ControllerOnly()]
        Task ReportClientClosedAsync(CancellationToken token = default);
        
        /// <summary>
        /// Sets current game flow phase of the league client.
        /// </summary>
        /// <param name="gameflowPhase">Current league client game flow phase to set.</param>
        /// <param name="readyCheckStarted">If game flow phase is ready check, this property determines timestamp when ready check was started in unix format.</param>
        [ControllerOnly()]
        Task SetGameflowPhaseAsync(GameflowPhase gameflowPhase, DateTime? readyCheckStarted, CancellationToken token = default);
        
        /// <summary>
        /// Reports that champ select phase
        /// has been started in the «League of Legends» client.
        /// </summary>
        /// <param name="userPosition">Index of the user in allies array.</param>
        /// <param name="enemiesCount">Count of matched enemies.</param>
        /// <param name="alliesRoles">Array of matched allies' roles</param>
        [ControllerOnly()]
        Task ReportChampSelectStartedAsync(int userPosition, int enemiesCount, List<Role> alliesRoles, CancellationToken token = default);
        
        /// <summary>
        /// Reports that action was requested from one of the matched players.
        /// </summary>
        /// <param name="requestedAt">When this action was requested by league client.</param>
        /// <param name="isAllyAction">Is action is prescribed for an ally or an opponent.</param>
        /// <param name="actorsRange">Specifies range of actors the action was requested from ([0..4]).</param>
        /// <param name="type">Type of the action.</param>
        [ControllerOnly()]
        Task ReportActionRequestedAsync(DateTime requestedAt, bool isAllyAction, ValueRange actorsRange, ActionType type, CancellationToken token = default);
        
        /// <summary>
        /// Reports that action was changed, i.e. hovered champion was changed
        /// or champion was picked or banned.
        /// </summary>
        /// <param name="completed">Is champion action completed or the champion is only hovered.</param>
        /// <param name="championId">ID of the picked or banned champion.</param>
        /// <param name="actorPosition">Position of the actor in ally or enemy team ([0..4]).</param>
        [ControllerOnly()]
        Task ReportActionChangedAsync(bool completed, int championId, int actorPosition, CancellationToken token = default);
        
        /// <summary>
        /// Reports that champion skin was changed by the one of the allies.
        /// </summary>
        /// <param name="playerPosition">Position of player whose skin has been changed in allies array. [0..4]</param>
        /// <param name="skinId">New skin id.</param>
        [ControllerOnly()]
        Task ReportSkinChangedAsync(int playerPosition, int skinId, CancellationToken token = default);
        
        /// <summary>
        /// Reports that champ select phase was completed or cancelled.
        /// </summary>
        [ControllerOnly()]
        Task ReportChampSelectEndedAsync(CancellationToken token = default);
        
        /// <summary>
        /// Sends command to a client controller that is specified in the parameters to execute.
        /// </summary>
        /// <param name="controllerId">Determine which controller should execute this command.</param>
        /// <param name="commandName">Command that should be sent to the client controller.</param>
        /// <param name="commandArgs">Arguments of the command.</param>
        [DeviceOnly()]
        Task<int> SendCommandAsync(int controllerId, CommandName commandName, ChampionCommandArgs? commandArgs, CancellationToken token = default);
        
        /// <summary>
        /// Sets result of the command after execution.
        /// </summary>
        /// <param name="commandId">Id of the command to set result of.</param>
        /// <param name="result">Result of the command.</param>
        [ControllerOnly()]
        Task SetCommandResultAsync(int commandId, CommandResult result, CancellationToken token = default);
    }
}

#nullable restore
