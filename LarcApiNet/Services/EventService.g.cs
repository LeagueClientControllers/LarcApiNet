#nullable enable
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using LccApiNet.EventHandlers;
using LccApiNet.Exceptions;
using LccApiNet.Model;
using LccApiNet.Model.Local;


namespace LccApiNet.Services {
    
    
    public partial class EventService {
        
        /// <summary>
        /// Fires when <see cref="ClientEvent"/> is occurred.
        /// </summary>
        public event ClientEventHandler? OnClientEvent;
        
        /// <summary>
        /// Fires when <see cref="CommandEvent"/> is occurred.
        /// </summary>
        public event CommandEventHandler? OnCommandEvent;
        
        /// <summary>
        /// Fires when <see cref="DeviceEvent"/> is occurred.
        /// </summary>
        public event DeviceEventHandler? OnDeviceEvent;
        
        private void HandleEventMessage(EventMessage message) {
            if ((message.Type == EventType.Client)) {
                ClientEvent? @event = message.Event.ToObject<ClientEvent>();
                if ((@event == null)) {
                    throw new EventProviderException("Event object is missing in event message.");
                }

                this.OnClientEvent?.Invoke(this, @event);
                return;
            }

            if ((message.Type == EventType.Command)) {
                CommandEvent? @event = message.Event.ToObject<CommandEvent>();
                if ((@event == null)) {
                    throw new EventProviderException("Event object is missing in event message.");
                }

                this.OnCommandEvent?.Invoke(this, @event);
                return;
            }

            if ((message.Type == EventType.Device)) {
                DeviceEvent? @event = message.Event.ToObject<DeviceEvent>();
                if ((@event == null)) {
                    throw new EventProviderException("Event object is missing in event message.");
                }

                this.OnDeviceEvent?.Invoke(this, @event);
                return;
            }

            throw new EventProviderException("Incoming message contains unrecognizable event type.");
        }
    }
}

#nullable restore
