#nullable enable
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ardalis.SmartEnum.JsonNet;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Prism.Mvvm;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


namespace LarcApiNet.Model {
    
    
    /// <summary>
    /// Describes an event related to champ select phase in league client.
    /// </summary>
    public class PickEvent {
        
        /// <summary>
        /// Type of the event
        /// </summary>
        [JsonProperty("type")]
        [JsonConverter(typeof(SmartEnumNameConverter<PickEventType, int>))]
        public PickEventType Type { get; set; } = default!;
        
        /// <summary>
        /// ID of the controller that manipulates league client
        /// in which this champ select phase is happening.
        /// </summary>
        [JsonProperty("controllerId")]
        public int ControllerId { get; set; } = default!;
        
        /// <summary>
        /// Specifies where in the pick queue user is.
        /// Only if {@see type} is {@see PickEventType.ChampSelectStarted}, otherwise null.
        /// </summary>
        [JsonProperty("userPickPosition")]
        public int? UserPickPosition { get; set; }//;
        
        /// <summary>
        /// Contains array of user's allies in a pick queue order with roles of each.
        /// Only if {@see type} is {@see PickEventType.ChampSelectStarted}, otherwise null.
        /// </summary>
        [JsonProperty("alliesRoles")]
        public List<Role>? AlliesRoles { get; set; }//;
        
        /// <summary>
        /// Contains number of matched enemies considering every one of them has {@see Role.Any} role.
        /// Only if {@see type} is {@see PickEventType.ChampSelectStarted}, otherwise null.
        /// </summary>
        [JsonProperty("enemiesCount")]
        public int? EnemiesCount { get; set; }//;
        
        /// <summary>
        /// When the action was requested.
        /// Only if {@see type} is {@see PickEventType.ActionRequested}, otherwise null.
        /// </summary>
        [JsonProperty("requestedAt")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.UnixDateTimeConverter))]
        public DateTime? RequestedAt { get; set; }//;
        
        /// <summary>
        /// Specifies if requested or changed action was pick or ban.
        /// Only if {@see type} is {@see PickEventType.ActionRequested}, otherwise null.
        /// </summary>
        [JsonProperty("actionType")]
        [JsonConverter(typeof(SmartEnumNameConverter<ActionType, int>))]
        public ActionType? ActionType { get; set; }//;
        
        /// <summary>
        /// Indicates whether action was requested from an ally.
        /// Only if {@see type} is {@see PickEventType.ActionRequested}, otherwise null.
        /// </summary>
        [JsonProperty("isActorAnAlly")]
        public bool? IsActorAnAlly { get; set; }//;
        
        /// <summary>
        /// Specifies range of actors the action was requested from ([0..4]).
        /// Only if {@see type} is {@see PickEventType.ActionRequested}, otherwise null.
        /// </summary>
        [JsonProperty("actorsRange")]
        public ValueRange? ActorsRange { get; set; }//;
        
        /// <summary>
        /// Position of the actor in ally or enemy team ([0..4]).
        /// Only if {@see type} is {@see PickEventType.ActionChanged} or {@see PickEventType.SkinChanged},
        /// otherwise null.
        /// </summary>
        [JsonProperty("actorPosition")]
        public int? ActorPosition { get; set; }//;
        
        /// <summary>
        /// ID of a champion that was banned or picked.
        /// Only if {@see type} is {@see PickEventType.ActionChanged}, otherwise null.
        /// </summary>
        [JsonProperty("championId")]
        public int? ChampionId { get; set; }//;
        
        /// <summary>
        /// Indicates whether champion was actually ban or picked.
        /// Only if {@see type} is {@see PickEventType.ActionChanged}, otherwise null.
        /// </summary>
        [JsonProperty("completed")]
        public bool? Completed { get; set; }//;
        
        /// <summary>
        /// ID of a skin that was applied to the picked champion.
        /// Only if {@see type} is {@see PickEventType.SkinChanged}, otherwise null.
        /// </summary>
        [JsonProperty("skinId")]
        public int? SkinId { get; set; }//;
    }
}

#nullable restore
